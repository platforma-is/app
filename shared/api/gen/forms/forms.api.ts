/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * platforma-backend
 * Platforma Backend Package
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AddFormBody,
  NullableForm,
  PartialForm,
  PartialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId,
  ResultDefaultSelectionPrismaFormPayload,
  ResultDefaultSelectionPrismaResponsePayload,
} from "../../model";
import { customInstance } from "../../mutator/custom-instance";
import type { ErrorType, BodyType } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const updateSettings = (
  formId: string,
  partialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId: BodyType<PartialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ResultDefaultSelectionPrismaFormPayload>(
    {
      url: `/forms/${formId}/settings`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: partialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId,
    },
    options,
  );
};

export const getUpdateSettingsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSettings>>,
    TError,
    {
      formId: string;
      data: BodyType<PartialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId>;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSettings>>,
  TError,
  {
    formId: string;
    data: BodyType<PartialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId>;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSettings>>,
    {
      formId: string;
      data: BodyType<PartialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId>;
    }
  > = (props) => {
    const { formId, data } = props ?? {};

    return updateSettings(formId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateSettingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSettings>>
>;
export type UpdateSettingsMutationBody =
  BodyType<PartialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId>;
export type UpdateSettingsMutationError = ErrorType<unknown>;

export const useUpdateSettings = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSettings>>,
    TError,
    {
      formId: string;
      data: BodyType<PartialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId>;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSettings>>,
  TError,
  {
    formId: string;
    data: BodyType<PartialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId>;
  },
  TContext
> => {
  const mutationOptions = getUpdateSettingsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getSettings = (
  formId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PartialOmitFormIdOrCreatedAtOrUpdatedAtOrAuthorId>(
    { url: `/forms/${formId}/settings`, method: "GET", signal },
    options,
  );
};

export const getGetSettingsQueryKey = (formId: string) => {
  return [`/forms/${formId}/settings`] as const;
};

export const getGetSettingsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSettings>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSettingsQueryKey(formId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSettings>>> = ({
    signal,
  }) => getSettings(formId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!formId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSettings>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSettingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSettings>>
>;
export type GetSettingsQueryError = ErrorType<unknown>;

export function useGetSettings<
  TData = Awaited<ReturnType<typeof getSettings>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSettings>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetSettings<
  TData = Awaited<ReturnType<typeof getSettings>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSettings>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetSettings<
  TData = Awaited<ReturnType<typeof getSettings>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetSettings<
  TData = Awaited<ReturnType<typeof getSettings>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSettingsQueryOptions(formId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addResponse = (
  formId: string,
  addResponseBody: BodyType<unknown>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    {
      url: `/forms/${formId}/responses`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addResponseBody,
    },
    options,
  );
};

export const getAddResponseMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addResponse>>,
    TError,
    { formId: string; data: BodyType<unknown> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addResponse>>,
  TError,
  { formId: string; data: BodyType<unknown> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addResponse>>,
    { formId: string; data: BodyType<unknown> }
  > = (props) => {
    const { formId, data } = props ?? {};

    return addResponse(formId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddResponseMutationResult = NonNullable<
  Awaited<ReturnType<typeof addResponse>>
>;
export type AddResponseMutationBody = BodyType<unknown>;
export type AddResponseMutationError = ErrorType<unknown>;

export const useAddResponse = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addResponse>>,
    TError,
    { formId: string; data: BodyType<unknown> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof addResponse>>,
  TError,
  { formId: string; data: BodyType<unknown> },
  TContext
> => {
  const mutationOptions = getAddResponseMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getResponses = (
  formId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ResultDefaultSelectionPrismaResponsePayload[]>(
    { url: `/forms/${formId}/responses`, method: "GET", signal },
    options,
  );
};

export const getGetResponsesQueryKey = (formId: string) => {
  return [`/forms/${formId}/responses`] as const;
};

export const getGetResponsesQueryOptions = <
  TData = Awaited<ReturnType<typeof getResponses>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getResponses>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetResponsesQueryKey(formId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getResponses>>> = ({
    signal,
  }) => getResponses(formId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!formId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getResponses>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetResponsesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getResponses>>
>;
export type GetResponsesQueryError = ErrorType<unknown>;

export function useGetResponses<
  TData = Awaited<ReturnType<typeof getResponses>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getResponses>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResponses>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetResponses<
  TData = Awaited<ReturnType<typeof getResponses>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getResponses>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResponses>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetResponses<
  TData = Awaited<ReturnType<typeof getResponses>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getResponses>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetResponses<
  TData = Awaited<ReturnType<typeof getResponses>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getResponses>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetResponsesQueryOptions(formId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getForms = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ResultDefaultSelectionPrismaFormPayload[]>(
    { url: `/forms`, method: "GET", signal },
    options,
  );
};

export const getGetFormsQueryKey = () => {
  return [`/forms`] as const;
};

export const getGetFormsQueryOptions = <
  TData = Awaited<ReturnType<typeof getForms>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getForms>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFormsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getForms>>> = ({
    signal,
  }) => getForms(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getForms>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFormsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getForms>>
>;
export type GetFormsQueryError = ErrorType<unknown>;

export function useGetForms<
  TData = Awaited<ReturnType<typeof getForms>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getForms>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getForms>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetForms<
  TData = Awaited<ReturnType<typeof getForms>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getForms>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getForms>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetForms<
  TData = Awaited<ReturnType<typeof getForms>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getForms>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetForms<
  TData = Awaited<ReturnType<typeof getForms>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getForms>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetFormsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addForm = (
  addFormBody: BodyType<AddFormBody>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ResultDefaultSelectionPrismaFormPayload>(
    {
      url: `/forms`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addFormBody,
    },
    options,
  );
};

export const getAddFormMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addForm>>,
    TError,
    { data: BodyType<AddFormBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addForm>>,
  TError,
  { data: BodyType<AddFormBody> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addForm>>,
    { data: BodyType<AddFormBody> }
  > = (props) => {
    const { data } = props ?? {};

    return addForm(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddFormMutationResult = NonNullable<
  Awaited<ReturnType<typeof addForm>>
>;
export type AddFormMutationBody = BodyType<AddFormBody>;
export type AddFormMutationError = ErrorType<unknown>;

export const useAddForm = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addForm>>,
    TError,
    { data: BodyType<AddFormBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof addForm>>,
  TError,
  { data: BodyType<AddFormBody> },
  TContext
> => {
  const mutationOptions = getAddFormMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getFormById = (
  formId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NullableForm>(
    { url: `/forms/${formId}`, method: "GET", signal },
    options,
  );
};

export const getGetFormByIdQueryKey = (formId: string) => {
  return [`/forms/${formId}`] as const;
};

export const getGetFormByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getFormById>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFormById>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFormByIdQueryKey(formId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFormById>>> = ({
    signal,
  }) => getFormById(formId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!formId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getFormById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFormByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFormById>>
>;
export type GetFormByIdQueryError = ErrorType<unknown>;

export function useGetFormById<
  TData = Awaited<ReturnType<typeof getFormById>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFormById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFormById>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFormById<
  TData = Awaited<ReturnType<typeof getFormById>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFormById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFormById>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFormById<
  TData = Awaited<ReturnType<typeof getFormById>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFormById>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetFormById<
  TData = Awaited<ReturnType<typeof getFormById>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFormById>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetFormByIdQueryOptions(formId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteForm = (
  formId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ResultDefaultSelectionPrismaFormPayload>(
    { url: `/forms/${formId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteFormMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteForm>>,
    TError,
    { formId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteForm>>,
  TError,
  { formId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteForm>>,
    { formId: string }
  > = (props) => {
    const { formId } = props ?? {};

    return deleteForm(formId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteFormMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteForm>>
>;

export type DeleteFormMutationError = ErrorType<unknown>;

export const useDeleteForm = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteForm>>,
    TError,
    { formId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteForm>>,
  TError,
  { formId: string },
  TContext
> => {
  const mutationOptions = getDeleteFormMutationOptions(options);

  return useMutation(mutationOptions);
};
export const updateForm = (
  formId: string,
  partialForm: BodyType<PartialForm>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ResultDefaultSelectionPrismaFormPayload>(
    {
      url: `/forms/${formId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: partialForm,
    },
    options,
  );
};

export const getUpdateFormMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateForm>>,
    TError,
    { formId: string; data: BodyType<PartialForm> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateForm>>,
  TError,
  { formId: string; data: BodyType<PartialForm> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateForm>>,
    { formId: string; data: BodyType<PartialForm> }
  > = (props) => {
    const { formId, data } = props ?? {};

    return updateForm(formId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateFormMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateForm>>
>;
export type UpdateFormMutationBody = BodyType<PartialForm>;
export type UpdateFormMutationError = ErrorType<unknown>;

export const useUpdateForm = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateForm>>,
    TError,
    { formId: string; data: BodyType<PartialForm> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateForm>>,
  TError,
  { formId: string; data: BodyType<PartialForm> },
  TContext
> => {
  const mutationOptions = getUpdateFormMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteResponse = (
  formId: string,
  responseId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ResultDefaultSelectionPrismaResponsePayload>(
    { url: `/forms/${formId}/responses/${responseId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteResponseMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteResponse>>,
    TError,
    { formId: string; responseId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteResponse>>,
  TError,
  { formId: string; responseId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteResponse>>,
    { formId: string; responseId: string }
  > = (props) => {
    const { formId, responseId } = props ?? {};

    return deleteResponse(formId, responseId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteResponseMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteResponse>>
>;

export type DeleteResponseMutationError = ErrorType<unknown>;

export const useDeleteResponse = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteResponse>>,
    TError,
    { formId: string; responseId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteResponse>>,
  TError,
  { formId: string; responseId: string },
  TContext
> => {
  const mutationOptions = getDeleteResponseMutationOptions(options);

  return useMutation(mutationOptions);
};
